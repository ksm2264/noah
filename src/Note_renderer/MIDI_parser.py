\nimport mido\n\ndef parse_midi(file_path):\n    """\n    Given the path to a MIDI file, extract its track data and return it as a dictionary.\n    The dictionary maps track names to a list of note events.\n    Each note event is a tuple of (time, note_number, velocity, duration)\n    """\n    midi_file = mido.MidiFile(file_path)\n    track_data = {}\n\n    for track in midi_file.tracks:\n        current_time = 0\n        notes_on = {}\n        track_notes = []\n        for msg in track:\n            current_time += msg.time\n            if msg.type == \'note_on\':\n                note_number = msg.note\n                velocity = msg.velocity\n                notes_on[note_number] = velocity\n                track_notes.append((current_time, note_number, velocity, None))\n            elif msg.type == \'note_off\':\n                note_number = msg.note\n                if note_number in notes_on:\n                    velocity = notes_on.pop(note_number)\n                    last_event = track_notes[-1]\n                    duration = current_time - last_event[0]\n                    track_notes[-1] = (last_event[0], last_event[1], last_event[2], duration)\n        track_name = track.name if track.name else f"Track {track.number}"\n        track_data[track_name] = track_notes\n\n    return track_data\n\n    def play_bell_sound(self):\n        pass\n\n